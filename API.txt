LLM逻辑：
有4个状态：
 - 待机：什么都不做
 - 生成：根据已有的信息生成句子，进行断句后发送
 - 等待TTS：生成完毕后等待直到生成语音完毕
 - 等待ASR：有语音输入但还没有识别完毕时等待识别完毕
启动时处于待机状态
状态逻辑：
待机状态：
 - 若处于待机状态时间大于5s，切换到生成状态
 - 若收到ASR给出的语音活动信号，切换到等待ASR状态
生成状态：
 - 生成一段回复完毕后切换到等待TTS状态
 - 若收到ASR给出的语音活动信号，切换到等待ASR状态
 - 从生成状态切换到其他状态时发出一个<eos>信号
等待TTS状态：
 - 若收到TTS给出的生成完毕信号，切换到待机状态
等待ASR状态：
 - 若收到ASR给出的语音识别信息，切换到生成状态

TTS逻辑：
有2个状态：
 - 待机：什么都不做
 - 生成：根据收到的信息生成语音和对齐信息并播放
启动时处于待机状态
状态逻辑：
待机状态：
 - 若收到LLM给出的生成句子，切换到生成状态
生成状态：
 - 不断接受LLM给出的生成句子并加入队列
 - 若收到ASR给出的语音活动信号，切换到待机状态，清空队列，并发出生成完毕信号
 - 若生成完一个句子（或是流式生成的一个chunk），发出其对应的对齐信息并播放这个段落，播放完则发出下一个对齐信息并播放下一个段落
 - 若将LLM给出的所有句子都生成播放完毕（即队列中的下一个是<eos>），切换到待机状态，并发出生成完毕信号

ASR逻辑：
有2个状态：
 - 待机：什么都不做
 - 转录：进行语音识别
状态逻辑：
待机状态：
 - 若VAD模型检测到语音活动，发出语音活动信号，并切换到转录状态
转录状态：
 - 若识别完毕则发出识别的文本，并切换到待机状态

前端逻辑：接受LLM给出的生成句子、ASR给出的语音识别信息、TTS给出的生成完毕信号和语音对齐信息

Chat逻辑：发出弹幕信息

语音活动信号示例：
{
    "from": "asr",
    "type": "signal",
    "payload": "activate"
}%SEP%
ASR识别文本示例：
{
    "from": "asr",
    "type": "data",
    "payload": {
        "user": "Developer A",
        "content": "this is an asr test."
    }
}%SEP%
LLM<eos>信号示例：
{
    "from": "llm",
    "type": "signal",
    "payload": "eos"
}
LLM生成文本示例：
{
    "from": "llm",
    "type": "data",
    "payload": {
        "content": "this is an llm test.",
        "id": <UUID>,
        "emotion": {
            "like": 0.1,
            "disgust": 0.1,
            "anger": 0.1,
            "happy": 0.1,
            "sad": 0.1,
            "neutral": 0.5
        }
    }
}%SEP%
TTS生成完毕信号示例：
{
    "from": "tts",
    "type": "signal",
    "payload": "finish"
}%SEP%
TTS对齐信息示例：
{
    "from": "tts",
    "type": "data",
    "payload": {
        "id": <对应的句子的id>,
        "token": <这一段音频对应的文本>,
        "duration": <这一段音频的长度>
    }
}%SEP%
Chat弹幕信息实例：
{
    "from": "chat",
    "type": "data",
    "payload": {
        "user": "Developer A",
        "content": "this is a chat test."
    }
}%SEP%

%SEP%用于分割不同数据包，当接收方没有及时接收导致数据包堆积时可以用%SEP%将数据包分割开分别处理
任何type=signal且payload=exit的数据包都会终止连接
任何模块在与panel连接后，都会发送一个ready类型数据包（{'from':'<模块名>', 'type': 'signal', 'payload':'ready'}），
panel在确认所有必须模块都ready后会发送一个start类型数据包（{'from':'panel', 'type': 'signal', 'payload':'start'}），
模块在接收到start信号后才开始启动主逻辑。